name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version √† publier (ex: v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-and-release:
    runs-on: windows-latest
    
    permissions:
      contents: write
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: electron/package-lock.json
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Node.js dependencies
      working-directory: electron
      run: npm ci
        
    - name: Build Electron application
      working-directory: electron
      run: npm run electron:build-win
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Get version information
      id: version
      run: |
        if ("${{ github.event_name }}" -eq "workflow_dispatch") {
          $version = "${{ github.event.inputs.version }}"
        } else {
          $version = "${{ github.ref_name }}"
        }
        $version_clean = $version -replace '^v', ''
        echo "version=$version" >> $env:GITHUB_OUTPUT
        echo "version_clean=$version_clean" >> $env:GITHUB_OUTPUT
        echo "Version: $version"
        echo "Version clean: $version_clean"
      shell: powershell
      
    - name: Verify build output
      run: |
        echo "Contenu du dossier dist:"
        Get-ChildItem -Path "electron/dist" -Recurse | Select-Object FullName
        
        $setupFile = "electron/dist/JSON-Tools-Setup-${{ steps.version.outputs.version_clean }}.exe"
        if (Test-Path $setupFile) {
          echo "‚úÖ Fichier setup trouv√©: $setupFile"
          $fileSize = (Get-Item $setupFile).Length
          echo "Taille du fichier: $([math]::Round($fileSize/1MB, 2)) MB"
        } else {
          echo "‚ùå Fichier setup non trouv√©: $setupFile"
          echo "Fichiers .exe disponibles:"
          Get-ChildItem -Path "electron/dist" -Filter "*.exe" | Select-Object Name, Length
          exit 1
        }
      shell: powershell
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.version.outputs.version }}
        name: Release ${{ steps.version.outputs.version }}
        body: |
          ## üöÄ JSON Tools ${{ steps.version.outputs.version }}
          
          ### üì¶ Installation
          1. T√©l√©chargez le fichier `JSON-Tools-Setup-${{ steps.version.outputs.version_clean }}.exe`
          2. Ex√©cutez le fichier t√©l√©charg√©
          3. Suivez les instructions d'installation
          
          ### üîß Configuration requise
          - **OS:** Windows 10 ou sup√©rieur (64-bit)
          - **Python:** 3.7+ (sera install√© automatiquement si n√©cessaire)
          - **Espace disque:** ~100 MB
          
          ### ‚ú® Fonctionnalit√©s
          - G√©n√©ration de donn√©es JSON de test
          - Interface utilisateur moderne et intuitive
          - Support des sch√©mas Swagger/OpenAPI
          - Anonymisation des donn√©es sensibles
          - Export vers diff√©rents formats
          
          ### üìã Notes de version
          Cette version inclut les derni√®res am√©liorations et corrections de bugs.
          
          ---
          
          **üîó Liens utiles:**
          - [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [Rapporter un bug](https://github.com/${{ github.repository }}/issues)
          
          **üí° Astuce:** Pour une installation silencieuse, utilisez `JSON-Tools-Setup-${{ steps.version.outputs.version_clean }}.exe /S`
        draft: false
        prerelease: false
        files: |
          electron/dist/JSON-Tools-Setup-${{ steps.version.outputs.version_clean }}.exe
        fail_on_unmatched_files: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 